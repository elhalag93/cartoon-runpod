name: Test and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
        # Install PyTorch with CPU-only index first
        pip install torch==2.6.0 torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        
        # Install other core dependencies individually to avoid conflicts
        pip install transformers>=4.40.0
        pip install diffusers>=0.30.0
        pip install accelerate>=0.30.0
        pip install runpod>=1.7.0
        pip install gradio>=5.25.2
        pip install fastapi>=0.104.0
        pip install uvicorn>=0.24.0
        pip install huggingface-hub>=0.30.2
        pip install safetensors>=0.5.3
        pip install numpy>=1.24.0
        pip install pillow>=10.0.0
        pip install soundfile>=0.13.1
        pip install requests>=2.31.0
        pip install pydantic>=2.11.3
        pip install tqdm
        
        # Verify torch installation
        python -c "import torch; print(f'✅ PyTorch {torch.__version__} installed successfully')"
    
    - name: Run tests
      run: |
        # Run basic validation tests with proper dependency handling
        echo "🧪 Running basic validation tests..."
        
        # Test individual imports first
        echo "Testing individual module imports..."
        python -c "import torch; print(f'✅ PyTorch {torch.__version__} - Device: {torch.device(\"cpu\")}')"
        python -c "import diffusers; print(f'✅ Diffusers {diffusers.__version__}')"
        python -c "import transformers; print(f'✅ Transformers {transformers.__version__}')"
        python -c "import runpod; print('✅ RunPod module available')"
        python -c "import gradio; print(f'✅ Gradio {gradio.__version__}')"
        python -c "import fastapi; print(f'✅ FastAPI {fastapi.__version__}')"
        
        # Test handler import
        echo "Testing handler import..."
        python -c "
        import sys
        sys.path.append('src')
        try:
            from handler import handler
            print('✅ Handler function imports successfully')
            print(f'✅ Handler is callable: {callable(handler)}')
            print('✅ All validation tests passed - production handler is ready')
        except Exception as e:
            print(f'❌ Handler import error: {e}')
            import traceback
            traceback.print_exc()
            sys.exit(1)
        "
        
        echo "🎉 All CI validation tests completed successfully!"
    
    - name: Test Docker build
      run: |
        docker build -t cartoon-animation-test .

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/cartoon-animation
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  validate-runpod:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate RunPod configuration
      run: |
        # Check required files exist
        test -f .runpod/config.yaml
        test -f .runpod/hub.json
        test -f .runpod/tests.json
        test -f src/handler.py
        test -f Dockerfile
        
        # Validate JSON syntax
        python -m json.tool .runpod/hub.json > /dev/null
        python -m json.tool .runpod/tests.json > /dev/null
        
        # Check handler has required function
        python -c "from src.handler import handler; print('Handler function found')"
        
        echo "✅ RunPod configuration is valid" 