name: Test and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Free up disk space
      run: |
        echo "Freeing up disk space..."
        # Remove unnecessary packages to free up space
        sudo apt-get remove -y --purge man-db
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        # Remove large directories that aren't needed
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        
        # Clear package cache
        sudo apt-get clean
        
        # Show available space
        df -h
        
    - name: Install dependencies
      run: |
        set -e  # Exit on any error
        echo "Installing minimal dependencies for CI testing..."
        
        python -m pip install --upgrade pip
        
        # Install only essential dependencies for CI validation
        echo "Installing core dependencies..."
        pip install --no-cache-dir torch==2.6.0 torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install --no-cache-dir transformers>=4.40.0
        pip install --no-cache-dir diffusers>=0.30.0
        pip install --no-cache-dir runpod>=1.7.0
        pip install --no-cache-dir gradio>=5.25.2
        pip install --no-cache-dir fastapi>=0.104.0
        pip install --no-cache-dir uvicorn>=0.24.0
        pip install --no-cache-dir numpy>=1.24.0
        pip install --no-cache-dir pillow>=10.0.0
        pip install --no-cache-dir soundfile>=0.13.1
        pip install --no-cache-dir requests>=2.31.0
        pip install --no-cache-dir pydantic>=2.11.3
        
        echo "Essential dependencies installed successfully!"
    
    - name: Verify installation
      run: |
        echo "Verifying essential dependencies..."
        
        # Test critical imports quickly
        python -c "
        import sys
        
        # Test only essential modules for CI
        modules_to_test = [
            ('torch', 'PyTorch'),
            ('transformers', 'Transformers'),
            ('diffusers', 'Diffusers'),
            ('runpod', 'RunPod'),
            ('fastapi', 'FastAPI'),
            ('numpy', 'NumPy'),
            ('PIL', 'Pillow'),
            ('pydantic', 'Pydantic')
        ]
        
        for module_name, display_name in modules_to_test:
            try:
                __import__(module_name)
                print(f'✅ {display_name} OK')
            except ImportError as e:
                print(f'❌ {display_name} failed: {e}')
                sys.exit(1)
        
        print('✅ All essential modules imported successfully')
        "
        
        echo "Dependency verification completed!"
    
    - name: Run tests
      run: |
        echo "Running minimal handler validation..."
        
        # Test handler import and basic functionality
        python -c "
        import sys
        import os
        
        # Add src to path and avoid circular import
        sys.path.insert(0, 'src')
        
        try:
            # Import from src.handler module to avoid circular import
            import handler as src_handler
            handler_func = src_handler.handler
            
            print('✅ Handler function imports successfully from src/handler.py')
            print(f'✅ Handler is callable: {callable(handler_func)}')
            
            # Test handler with minimal input (should handle gracefully even without models)
            test_job = {'input': {'task_type': 'animation', 'character': 'temo', 'prompt': 'test'}}
            result = handler_func(test_job)
            
            if isinstance(result, dict):
                print('✅ Handler returns proper dictionary format')
                if 'error' in result:
                    print('ℹ️ Handler error (expected in CI without models): OK')
                else:
                    print('✅ Handler executed successfully')
            else:
                print('❌ Handler returned unexpected type')
                sys.exit(1)
                
            print('✅ Handler validation passed - production handler is ready')
            
        except Exception as e:
            print(f'❌ Handler validation error: {e}')
            sys.exit(1)
        "
        
        echo "Handler validation completed!"
    
    - name: Check disk space before Docker build
      run: |
        echo "Disk space before Docker build:"
        df -h
        echo "Cleaning up pip cache..."
        pip cache purge
        echo "Disk space after cleanup:"
        df -h
    
    - name: Test Docker build
      run: |
        # Build with minimal layers and no cache to save space
        docker build --no-cache --rm -t cartoon-animation-test .
        
        # Clean up immediately after build
        docker image prune -f
        
        echo "Disk space after Docker build:"
        df -h
    
    - name: Final cleanup
      if: always()
      run: |
        echo "Final cleanup to prevent disk space issues..."
        
        # Remove Docker images and containers
        docker system prune -af || true
        
        # Clear pip cache
        pip cache purge || true
        
        # Remove any large temporary files
        sudo rm -rf /tmp/* || true
        
        # Show final disk usage
        echo "Final disk space:"
        df -h

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/cartoon-animation
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  validate-runpod:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install basic dependencies for validation
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir torch --index-url https://download.pytorch.org/whl/cpu
        pip install --no-cache-dir transformers diffusers runpod
        pip install --no-cache-dir soundfile numpy pillow
    
    - name: Validate RunPod configuration
      run: |
        echo "Validating RunPod configuration files..."
        
        # Check required files exist
        echo "Checking required files..."
        test -f .runpod/config.yaml && echo "✅ config.yaml exists"
        test -f .runpod/hub.json && echo "✅ hub.json exists"
        test -f .runpod/tests.json && echo "✅ tests.json exists"
        test -f src/handler.py && echo "✅ src/handler.py exists"
        test -f handler.py && echo "✅ handler.py (RunPod entry point) exists"
        test -f Dockerfile && echo "✅ Dockerfile exists"
        
        # Validate JSON syntax
        echo "Validating JSON syntax..."
        python -m json.tool .runpod/hub.json > /dev/null && echo "✅ hub.json is valid JSON"
        python -m json.tool .runpod/tests.json > /dev/null && echo "✅ tests.json is valid JSON"
        
        # Check handler has required function
        echo "Validating handler function..."
        python -c "
        import sys
        sys.path.insert(0, 'src')
        try:
            import handler as src_handler
            handler_func = src_handler.handler
            print('✅ Handler function found and importable from src/handler.py')
            print(f'✅ Handler is callable: {callable(handler_func)}')
        except Exception as e:
            print(f'❌ Handler validation failed: {e}')
            sys.exit(1)
        "
        
        echo "RunPod configuration is valid!" 